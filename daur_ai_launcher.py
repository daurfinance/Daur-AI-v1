#!/usr/bin/env python3
"""
Daur-AI System Launcher
–ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–µ–ª—å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã: AI –∞–≥–µ–Ω—Ç + Telegram –±–æ—Ç + –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import os
import sys
import asyncio
import logging
import signal
import threading
import subprocess
from pathlib import Path
from typing import Optional, Dict, Any
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
try:
    from integration.bot_agent_bridge import BotAgentBridge, initialize_bridge
    from telegram.daur_ai_bot import DaurAITelegramBot
    from agent.integrated_ai_agent import IntegratedAIAgent
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    sys.exit(1)

class DaurAILauncher:
    """–ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã Daur-AI"""
    
    def __init__(self, config_path: str = "telegram_config.json"):
        self.config_path = config_path
        self.config = self.load_config()
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.bridge: Optional[BotAgentBridge] = None
        self.telegram_bot: Optional[DaurAITelegramBot] = None
        self.web_server_process: Optional[subprocess.Popen] = None
        self.electron_process: Optional[subprocess.Popen] = None
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_running = False
        self.shutdown_event = threading.Event()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        self.logger = logging.getLogger(__name__)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            self.create_default_config()
            return self.load_config()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return self.get_default_config()
    
    def get_default_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "telegram": {
                "bot_token": "",
                "allowed_users": [],
                "features": {
                    "voice_recognition": True,
                    "file_processing": True,
                    "image_analysis": True
                }
            },
            "ai_agent": {
                "auto_start": True,
                "default_model": "ollama",
                "fallback_model": "simple"
            },
            "web_interface": {
                "enabled": True,
                "port": 8000,
                "auto_open": False
            },
            "electron": {
                "enabled": True,
                "auto_start": False
            },
            "logging": {
                "level": "INFO",
                "file": "logs/daur_ai.log"
            }
        }
    
    def create_default_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        config = self.get_default_config()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs("logs", exist_ok=True)
        
        with open(self.config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.config_path}")
        print("üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ —É–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_config = self.config.get('logging', {})
        log_level = getattr(logging, log_config.get('level', 'INFO'))
        log_file = log_config.get('file', 'logs/daur_ai.log')
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs(os.path.dirname(log_file), exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.basicConfig(
            level=log_level,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file, encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
    
    async def start_system(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã Daur-AI...")
            self.is_running = True
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ—Å—Ç
            await self.start_bridge()
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if self.config.get('web_interface', {}).get('enabled', True):
                await self.start_web_interface()
            
            # 3. –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
            if self.config.get('telegram', {}).get('bot_token'):
                await self.start_telegram_bot()
            else:
                self.logger.warning("‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω: –Ω–µ —É–∫–∞–∑–∞–Ω bot_token")
            
            # 4. –ó–∞–ø—É—Å–∫–∞–µ–º Electron (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if self.config.get('electron', {}).get('enabled', False):
                await self.start_electron()
            
            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ Daur-AI —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
            self.print_status()
            
            # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.wait_for_shutdown()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise
        finally:
            await self.shutdown_system()
    
    async def start_bridge(self):
        """–ó–∞–ø—É—Å–∫ –º–æ—Å—Ç–∞ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        self.logger.info("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Å—Ç–∞...")
        
        self.bridge = initialize_bridge(self.config_path)
        await self.bridge.initialize()
        
        self.logger.info("‚úÖ –ú–æ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        self.logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        telegram_config = self.config.get('telegram', {})
        bot_token = telegram_config.get('bot_token') or os.getenv('TELEGRAM_BOT_TOKEN')
        
        if not bot_token:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN")
        
        allowed_users = telegram_config.get('allowed_users', [])
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        self.telegram_bot = DaurAITelegramBot(bot_token, allowed_users)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –º–æ—Å—Ç—É
        if self.bridge:
            self.bridge.set_telegram_bot(self.telegram_bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        bot_thread = threading.Thread(
            target=self.telegram_bot.run,
            daemon=True
        )
        bot_thread.start()
        
        self.logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    async def start_web_interface(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.logger.info("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
            api_script = Path("src/web/enhanced_api_server.py")
            if api_script.exists():
                self.web_server_process = subprocess.Popen([
                    sys.executable, str(api_script)
                ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                
                self.logger.info("‚úÖ –í–µ–± API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
            else:
                self.logger.warning("‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º React –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            react_dir = Path("daur-ai-advanced-panel")
            if react_dir.exists():
                self.logger.info("üé® React –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5174")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
    
    async def start_electron(self):
        """–ó–∞–ø—É—Å–∫ Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.logger.info("üñ•Ô∏è –ó–∞–ø—É—Å–∫ Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Electron
            if Path("node_modules/.bin/electron").exists():
                self.electron_process = subprocess.Popen([
                    "npm", "run", "electron"
                ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                
                self.logger.info("‚úÖ Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
            else:
                self.logger.warning("‚ö†Ô∏è Electron –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Electron: {e}")
    
    def print_status(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("\n" + "="*60)
        print("ü§ñ DAUR-AI –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê")
        print("="*60)
        
        if self.bridge:
            print("‚úÖ AI –ê–≥–µ–Ω—Ç: –ê–∫—Ç–∏–≤–µ–Ω")
        else:
            print("‚ùå AI –ê–≥–µ–Ω—Ç: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω")
        
        if self.telegram_bot:
            print("‚úÖ Telegram –ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω")
        else:
            print("‚ùå Telegram –ë–æ—Ç: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω")
        
        if self.web_server_process:
            print("‚úÖ –í–µ–± API: http://localhost:8000")
        else:
            print("‚ùå –í–µ–± API: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω")
        
        print("‚úÖ –í–µ–± –ü–∞–Ω–µ–ª—å: http://localhost:5174")
        
        if self.electron_process:
            print("‚úÖ Desktop App: –ó–∞–ø—É—â–µ–Ω–æ")
        
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
        print("   üåê –í–µ–±-–ø–∞–Ω–µ–ª—å: http://localhost:5174")
        print("   üîå API: http://localhost:8000")
        print("   üì± Telegram: @your_bot_name")
        
        print("\n‚ö° –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("   Ctrl+C - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        print("   /status - –°—Ç–∞—Ç—É—Å –≤ Telegram")
        print("   /help - –°–ø—Ä–∞–≤–∫–∞ –≤ Telegram")
        
        print("\nüîÑ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("="*60 + "\n")
    
    async def wait_for_shutdown(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            while self.is_running and not self.shutdown_event.is_set():
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    async def shutdown_system(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã Daur-AI...")
        
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å—Ç
        if self.bridge:
            self.bridge.shutdown()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        if self.web_server_process:
            self.web_server_process.terminate()
            try:
                self.web_server_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                self.web_server_process.kill()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Electron
        if self.electron_process:
            self.electron_process.terminate()
            try:
                self.electron_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                self.electron_process.kill()
        
        self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        self.shutdown_event.set()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ Daur-AI System Launcher")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–∞—É–Ω—á–µ—Ä
    launcher = DaurAILauncher()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        asyncio.run(launcher.start_system())
    except KeyboardInterrupt:
        print("\nüëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
