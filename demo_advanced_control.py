#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Daur-AI: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏

–í–µ—Ä—Å–∏—è: 1.1
–î–∞—Ç–∞: 01.10.2025
"""

import sys
import os
import time
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.input.advanced_controller import AdvancedInputController, ADVANCED_AVAILABLE
from src.apps.advanced_manager import AdvancedAppManager
from src.agent.core import DaurAgent
from src.config.settings import load_config


def setup_demo_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout)
        ]
    )


def demo_input_controller():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –≤–≤–æ–¥–∞"""
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –ö–û–ù–¢–†–û–õ–õ–ï–†–ê –í–í–û–î–ê")
    print("="*60)
    
    if not ADVANCED_AVAILABLE:
        print("‚ùå –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞: pip install pyautogui pynput pillow opencv-python")
        return False
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        controller = AdvancedInputController("Linux")
        print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
        screen_size = controller.get_screen_size()
        mouse_pos = controller.get_mouse_position()
        
        print(f"üñ•Ô∏è  –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {screen_size[0]}x{screen_size[1]}")
        print(f"üñ±Ô∏è  –ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏: {mouse_pos}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:")
        
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        print("  ‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∏ –≤ —Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞...")
        center_x, center_y = screen_size[0] // 2, screen_size[1] // 2
        if controller.move_mouse(center_x, center_y, duration=0.5):
            print("    ‚úÖ –ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞")
        else:
            print("    ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∏")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        print("  ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
        screenshot = controller.take_screenshot()
        if screenshot is not None:
            print(f"    ‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: {screenshot.shape}")
        else:
            print("    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ API
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ API:")
        
        test_actions = [
            {
                'action': 'input_type',
                'params': {'text': 'Hello from Daur-AI!', 'interval': 0.05}
            },
            {
                'action': 'input_key',
                'params': {'key': 'enter'}
            },
            {
                'action': 'input_hotkey',
                'params': {'keys': ['ctrl', 'a']}
            }
        ]
        
        for i, action in enumerate(test_actions, 1):
            print(f"  –î–µ–π—Å—Ç–≤–∏–µ {i}: {action['action']}")
            try:
                # –í headless —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
                if os.getenv('DISPLAY') is None:
                    print(f"    üìù –°–∏–º—É–ª—è—Ü–∏—è: {action}")
                    result = True
                else:
                    result = controller.execute_action(action)
                
                print(f"    {'‚úÖ' if result else '‚ùå'} {'–£—Å–ø–µ—à–Ω–æ' if result else '–û—à–∏–±–∫–∞'}")
                time.sleep(0.5)
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞
        controller.cleanup()
        print("\n‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ –≤–≤–æ–¥–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def demo_app_manager():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô")
    print("="*60)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        app_manager = AdvancedAppManager("Linux")
        print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:")
        apps = app_manager.get_running_apps()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏
        apps_sorted = sorted(apps, key=lambda x: x.memory_mb, reverse=True)[:10]
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(apps)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Ç–æ–ø-10 –ø–æ –ø–∞–º—è—Ç–∏:")
        for i, app in enumerate(apps_sorted, 1):
            print(f"  {i:2d}. {app.name:<20} PID:{app.pid:<8} RAM:{app.memory_mb:6.1f}MB CPU:{app.cpu_percent:5.1f}%")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:")
        search_terms = ["python", "bash", "systemd", "firefox", "chrome"]
        
        for term in search_terms:
            found_apps = app_manager.find_app_by_name(term)
            if found_apps:
                print(f"  '{term}': –Ω–∞–π–¥–µ–Ω–æ {len(found_apps)} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
                for app in found_apps[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"    - {app.name} (PID: {app.pid})")
            else:
                print(f"  '{term}': –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        test_apps = ["calculator", "text_editor"]
        
        for app_name in test_apps:
            print(f"  –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞: {app_name}")
            try:
                # –í headless —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º
                if os.getenv('DISPLAY') is None:
                    print(f"    üìù –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ {app_name}")
                    result = True
                else:
                    result = app_manager.launch_app(app_name)
                
                print(f"    {'‚úÖ' if result else '‚ùå'} {'–ó–∞–ø—É—â–µ–Ω–æ' if result else '–û—à–∏–±–∫–∞'}")
                
                if result:
                    time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–ø—É—â–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    found = app_manager.find_app_by_name(app_name)
                    if found:
                        print(f"    ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏)
                        if not os.getenv('DISPLAY') is None:
                            print(f"    üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
                            close_result = app_manager.close_app(app_name)
                            print(f"    {'‚úÖ' if close_result else '‚ùå'} {'–ó–∞–∫—Ä—ã—Ç–æ' if close_result else '–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'}")
                    else:
                        print(f"    ‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ API
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ API:")
        
        test_actions = [
            {
                'action': 'app_list',
                'params': {}
            },
            {
                'action': 'app_open',
                'params': {'app_name': 'calculator'}
            }
        ]
        
        for i, action in enumerate(test_actions, 1):
            print(f"  –î–µ–π—Å—Ç–≤–∏–µ {i}: {action['action']}")
            try:
                result = app_manager.execute_action(action)
                print(f"    {'‚úÖ' if result else '‚ùå'} {'–£—Å–ø–µ—à–Ω–æ' if result else '–û—à–∏–±–∫–∞'}")
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞
        app_manager.cleanup()
        print("\n‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return False


def demo_integrated_agent():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ì–û –ê–ì–ï–ù–¢–ê")
    print("="*60)
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        agent = DaurAgent(config, ui_mode="console", sandbox=True)
        print("‚úÖ –ê–≥–µ–Ω—Ç —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        print(f"üîß –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤–≤–æ–¥–∞: {type(agent.input_controller).__name__}")
        print(f"üîß –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {type(agent.app_manager).__name__}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å —Ä–µ–∞–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
        test_commands = [
            "–ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
            "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test_advanced.txt —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!'",
            "–æ—Ç–∫—Ä–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
            "–Ω–∞–ø–µ—á–∞—Ç–∞–π —Ç–µ–∫—Å—Ç 'Hello Advanced Control!'",
            "help"
        ]
        
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º:")
        for i, command in enumerate(test_commands, 1):
            print(f"\n{i}. –ö–æ–º–∞–Ω–¥–∞: '{command}'")
            try:
                response = agent.handle_command(command)
                print(f"   –û—Ç–≤–µ—Ç: {response}")
                time.sleep(1)
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        print("\nüß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:")
        complex_commands = [
            "–æ—Ç–∫—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä firefox –∏ –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ google.com",
            "—Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∏ –Ω–∞–ø–∏—à–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫",
            "—Å–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏ –≤ —Ñ–∞–π–ª screenshot.png",
            "–Ω–∞–π–¥–∏ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã python –∏ –ø–æ–∫–∞–∂–∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"
        ]
        
        for command in complex_commands:
            print(f"\n–ö–æ–º–∞–Ω–¥–∞: '{command}'")
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
                actions = agent.command_parser.parse(command)
                print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
                for j, action in enumerate(actions, 1):
                    print(f"  {j}. {action}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        agent.cleanup()
        print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–≥–µ–Ω—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–û–ô")
    print("–†–µ–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏")
    print("="*60)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_demo_logging()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ headless —Ä–µ–∂–∏–º–∞
    if os.getenv('DISPLAY') is None:
        print("‚ö†Ô∏è  HEADLESS –†–ï–ñ–ò–ú –û–ë–ù–ê–†–£–ñ–ï–ù")
        print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        print("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Å—Ä–µ–¥–µ")
        print()
    
    success_count = 0
    total_tests = 3
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –≤–≤–æ–¥–∞
        if demo_input_controller():
            success_count += 1
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        if demo_app_manager():
            success_count += 1
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        if demo_integrated_agent():
            success_count += 1
        
        print("\n" + "="*60)
        print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        print("="*60)
        
        if success_count == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("\n–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print("Daur-AI —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Ä–µ–∞–ª—å–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º!")
        elif success_count > 0:
            print("‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•")
            print("\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
        else:
            print("‚ùå –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨")
            print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("1. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            print("2. Headless —Ä–µ–∂–∏–º –±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Å—Ä–µ–¥—ã")
            print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞")
        
        print("\nüìö –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("  ‚Ä¢ –†–µ–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π")
        print("  ‚Ä¢ –ó–∞–ø—É—Å–∫ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        print("  ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        print("  ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
        
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  ‚Ä¢ –í–µ–±-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("  ‚Ä¢ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è")
        print("  ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π")
        print("  ‚Ä¢ OCR –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
        
    except KeyboardInterrupt:
        print("\n\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
