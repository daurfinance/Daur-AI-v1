#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ Daur-AI
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import time
import logging
import json
import sys
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append('src')

try:
    from agent.integrated_ai_agent import IntegratedAIAgent, Task, TaskPriority
    from learning.adaptive_learning_system import LearningMode
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö")
    sys.exit(1)

class DaurAIDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Daur-AI"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.agent = None
        
    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"""
        print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ Daur-AI")
        print("=" * 60)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
            await self.initialize_agent()
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            await self.demo_basic_functions()
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await self.demo_system_control()
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
            await self.demo_learning_capabilities()
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏
            await self.demo_multimodal_features()
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏
            await self.demo_autonomous_behavior()
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            await self.show_final_statistics()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        
        finally:
            if self.agent:
                await self.agent.stop()
    
    async def initialize_agent(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç AI-–∞–≥–µ–Ω—Ç–∞"""
        print("\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-–∞–≥–µ–Ω—Ç–∞...")
        
        config = {
            'learning_enabled': True,
            'auto_mode': False,
            'debug_mode': True,
            'max_concurrent_tasks': 3
        }
        
        self.agent = IntegratedAIAgent(config)
        
        # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(self.agent.start())
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        await asyncio.sleep(2)
        
        status = self.agent.get_status()
        print(f"‚úÖ –ê–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (ID: {status['agent_id'][:8]})")
        print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status['state']}")
        print(f"   –û–±—É—á–µ–Ω–∏–µ: {'–≤–∫–ª—é—á–µ–Ω–æ' if status['learning_enabled'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}")
    
    async def demo_basic_functions(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        print("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        print("-" * 40)
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
        commands = [
            "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª demo_test.txt",
            "–ø–æ–∫–∞–∂–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è",
            "–ø—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
            "—Å–æ–∑–¥–∞–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é test_folder"
        ]
        
        for i, command in enumerate(commands, 1):
            print(f"\n{i}. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: '{command}'")
            
            result = await self.agent.execute_command(command)
            
            if result.get('success', False):
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            await asyncio.sleep(1)
    
    async def demo_system_control(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π"""
        print("\nüñ•Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("-" * 40)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        system_commands = [
            "–ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
            "–ø—Ä–æ–≤–µ—Ä—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏",
            "–ø–æ–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ",
            "—Å–æ–∑–¥–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"
        ]
        
        for i, command in enumerate(system_commands, 1):
            print(f"\n{i}. –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{command}'")
            
            result = await self.agent.execute_command(
                command, 
                {'device_type': 'system', 'priority': 'high'}
            )
            
            if result.get('success', False):
                print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            else:
                print(f"   ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è sandbox: {result.get('error', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}")
            
            await asyncio.sleep(1)
    
    async def demo_learning_capabilities(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è"""
        print("\nüß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è")
        print("-" * 40)
        
        if not self.agent.learning_system:
            print("   ‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
        self.agent.learning_system.set_learning_mode(LearningMode.ACTIVE)
        print("   üìö –†–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        learning_commands = [
            "–æ—Ç–∫—Ä–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä",
            "—Å–æ–∑–¥–∞–π –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º 'Hello AI'",
            "—Å–æ—Ö—Ä–∞–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫ ai_test.txt",
            "–∑–∞–∫—Ä–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä"
        ]
        
        print("\n   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:")
        for i, command in enumerate(learning_commands, 1):
            print(f"   {i}. {command}")
            
            result = await self.agent.execute_command(command)
            await asyncio.sleep(0.5)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
        await asyncio.sleep(2)
        learning_stats = self.agent.learning_system.get_learning_statistics()
        
        print(f"\n   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:")
        print(f"      –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {learning_stats.get('total_actions', 0)}")
        print(f"      –£—Å–ø–µ—à–Ω—ã—Ö: {learning_stats.get('successful_actions', 0)}")
        print(f"      –ò–∑—É—á–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {learning_stats.get('patterns_count', 0)}")
        print(f"      –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∞–≤–∏–ª: {learning_stats.get('rules_count', 0)}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = self.agent.learning_system.get_learning_recommendations({
            'device_type': 'system',
            'command': '—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª'
        })
        
        if recommendations:
            print(f"   üí° –ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–∏—è")
        else:
            print("   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    async def demo_multimodal_features(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        print("\nüé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        print("-" * 40)
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞
        multimodal_commands = [
            "—Å–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞",
            "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ",
            "–Ω–∞–π–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ",
            "—Ä–∞—Å–ø–æ–∑–Ω–∞–π —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
        ]
        
        for i, command in enumerate(multimodal_commands, 1):
            print(f"\n{i}. –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{command}'")
            
            result = await self.agent.execute_command(
                command,
                {'requires_vision': True, 'device_type': 'screen'}
            )
            
            if result.get('success', False):
                print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            else:
                print(f"   ‚ö†Ô∏è Sandbox –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {result.get('error', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ headless —Ä–µ–∂–∏–º–µ')}")
            
            await asyncio.sleep(1)
    
    async def demo_autonomous_behavior(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"""
        print("\nü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
        print("-" * 40)
        
        # –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.agent.configure({'auto_mode': True})
        print("   üîÑ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
        
        # –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        complex_task = Task(
            task_id="autonomous_demo",
            description="–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞: —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
            command="—Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ —Ç–µ—Å—Ç–∞–º–∏",
            priority=TaskPriority.HIGH,
            context={
                'autonomous': True,
                'project_name': 'ai_demo_project',
                'requirements': ['readme', 'tests', 'documentation']
            },
            created_at=time.time()
        )
        
        print(f"\n   üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏: {complex_task.description}")
        await self.agent.add_task(complex_task)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print("   ‚è≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")
        
        for i in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
            tasks_status = self.agent.get_tasks_status()
            
            if complex_task.task_id in [tid for tid in tasks_status['active']]:
                active_task = tasks_status['active'][complex_task.task_id]
                print(f"      –ü—Ä–æ–≥—Ä–µ—Å—Å: {active_task['progress']:.1f}% - {active_task['status']}")
            elif tasks_status['completed'] > 0:
                print("   ‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                break
            elif tasks_status['failed'] > 0:
                print("   ‚ö†Ô∏è –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
                break
            
            await asyncio.sleep(1)
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.agent.configure({'auto_mode': False})
        print("   üîÑ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω")
    
    async def show_final_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã")
        print("=" * 60)
        
        # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
        status = self.agent.get_status()
        print(f"ü§ñ –ê–≥–µ–Ω—Ç ID: {status['agent_id'][:8]}")
        print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status['state']}")
        print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status['uptime_seconds']:.1f} —Å–µ–∫")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        stats = status['stats']
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(f"   –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['commands_executed']}")
        print(f"   –ó–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['tasks_completed']}")
        print(f"   –ó–∞–¥–∞—á —Å –æ—à–∏–±–∫–∞–º–∏: {stats['tasks_failed']}")
        
        if stats['commands_executed'] > 0:
            success_rate = (stats['tasks_completed'] / stats['commands_executed']) * 100
            print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        if self.agent.learning_system:
            learning_stats = self.agent.learning_system.get_learning_statistics()
            print(f"\nüß† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:")
            print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑—É—á–µ–Ω–æ: {learning_stats.get('patterns_count', 0)}")
            print(f"   –ü—Ä–∞–≤–∏–ª —Å–æ–∑–¥–∞–Ω–æ: {learning_stats.get('rules_count', 0)}")
            print(f"   –°–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è: {stats.get('learning_sessions', 0)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
        tasks_status = self.agent.get_tasks_status()
        print(f"\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(tasks_status['active'])}")
        print(f"   –í –æ—á–µ—Ä–µ–¥–∏: {tasks_status['queue_size']}")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {tasks_status['completed']}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {tasks_status['failed']}")
        
        print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"   Daur-AI –ø–æ–∫–∞–∑–∞–ª –ø–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:")
        print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
        print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ") 
        print(f"   ‚úÖ –û–±—É—á–µ–Ω–∏–µ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è")
        print(f"   ‚úÖ –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
        print(f"   ‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    demo = DaurAIDemo()
    await demo.run_demo()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
