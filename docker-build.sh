#!/bin/bash
# Daur-AI Docker Build Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        warning "docker-compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è docker compose."
        COMPOSE_CMD="docker compose"
    else
        COMPOSE_CMD="docker-compose"
    fi
    
    success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
build_image() {
    info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ Daur-AI..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    if [ ! -d "daur-ai-web-panel/dist" ]; then
        info "–°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
        cd daur-ai-web-panel
        if [ ! -d "node_modules" ]; then
            npm install
        fi
        npm run build
        cd ..
        success "–§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–æ–±—Ä–∞–Ω"
    fi
    
    # –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
    docker build -t daur-ai:latest . || {
        error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞"
        exit 1
    }
    
    success "Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ"
}

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
run_container() {
    info "–ó–∞–ø—É—Å–∫ Daur-AI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker stop daur-ai-agent 2>/dev/null || true
    docker rm daur-ai-agent 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    docker run -d \
        --name daur-ai-agent \
        --restart unless-stopped \
        -p 3000:80 \
        -p 8000:8000 \
        -v daur_data:/app/data \
        -v daur_logs:/var/log/daur-ai \
        -e DAUR_AI_SANDBOX=true \
        -e PYTHONUNBUFFERED=1 \
        daur-ai:latest || {
        error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        exit 1
    }
    
    success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"
}

# –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ docker-compose
run_compose() {
    info "–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ docker-compose..."
    
    $COMPOSE_CMD down 2>/dev/null || true
    $COMPOSE_CMD up -d || {
        error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ docker-compose"
        exit 1
    }
    
    success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —á–µ—Ä–µ–∑ docker-compose"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
health_check() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–ø–∞–Ω–µ–ª–∏
    if curl -f http://localhost:3000 >/dev/null 2>&1; then
        success "–í–µ–±-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞: http://localhost:3000"
    else
        warning "–í–µ–±-–ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    if curl -f http://localhost:8000/health >/dev/null 2>&1; then
        success "API –¥–æ—Å—Ç—É–ø–Ω–æ: http://localhost:8000"
    else
        warning "API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    fi
}

# –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤
show_logs() {
    info "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    docker logs -f daur-ai-agent
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
stop_container() {
    info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Daur-AI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    docker stop daur-ai-agent 2>/dev/null || true
    docker rm daur-ai-agent 2>/dev/null || true
    success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –û—á–∏—Å—Ç–∫–∞
cleanup() {
    info "–û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
    docker system prune -f
    success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    info "–°—Ç–∞—Ç—É—Å Daur-AI —Å–µ—Ä–≤–∏—Å–æ–≤:"
    echo
    
    # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if docker ps | grep -q daur-ai-agent; then
        success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä daur-ai-agent: –ó–ê–ü–£–©–ï–ù"
    else
        warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä daur-ai-agent: –û–°–¢–ê–ù–û–í–õ–ï–ù"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    if netstat -tuln 2>/dev/null | grep -q :3000; then
        success "–ü–æ—Ä—Ç 3000: –ó–ê–ù–Ø–¢ (–≤–µ–±-–ø–∞–Ω–µ–ª—å)"
    else
        warning "–ü–æ—Ä—Ç 3000: –°–í–û–ë–û–î–ï–ù"
    fi
    
    if netstat -tuln 2>/dev/null | grep -q :8000; then
        success "–ü–æ—Ä—Ç 8000: –ó–ê–ù–Ø–¢ (API)"
    else
        warning "–ü–æ—Ä—Ç 8000: –°–í–û–ë–û–î–ï–ù"
    fi
    
    echo
    info "–î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
    echo "  üåê –í–µ–±-–ø–∞–Ω–µ–ª—å: http://localhost:3000"
    echo "  üîå API: http://localhost:8000"
    echo "  üè• Health: http://localhost:8000/health"
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
show_menu() {
    echo
    echo "ü§ñ Daur-AI Docker Management"
    echo "=============================="
    echo "1) –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞"
    echo "2) –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo "3) –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ docker-compose"
    echo "4) –û—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo "5) –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "6) –°—Ç–∞—Ç—É—Å"
    echo "7) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"
    echo "8) –û—á–∏—Å—Ç–∫–∞"
    echo "9) –í—ã—Ö–æ–¥"
    echo
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    echo "üöÄ Daur-AI Docker Build & Run Script"
    echo "====================================="
    
    check_dependencies
    
    if [ $# -eq 0 ]; then
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        while true; do
            show_menu
            read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-9): " choice
            
            case $choice in
                1) build_image ;;
                2) build_image && run_container && health_check ;;
                3) build_image && run_compose && health_check ;;
                4) stop_container ;;
                5) show_logs ;;
                6) show_status ;;
                7) health_check ;;
                8) cleanup ;;
                9) exit 0 ;;
                *) warning "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." ;;
            esac
            
            echo
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        done
    else
        # –†–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        case $1 in
            build) build_image ;;
            run) build_image && run_container && health_check ;;
            compose) build_image && run_compose && health_check ;;
            stop) stop_container ;;
            logs) show_logs ;;
            status) show_status ;;
            health) health_check ;;
            clean) cleanup ;;
            *)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [build|run|compose|stop|logs|status|health|clean]"
                echo "–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"
                exit 1
                ;;
        esac
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'echo; warning "–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; exit 1' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"
