#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Daur-AI: Скрипт для сборки документации
Собирает документацию проекта с использованием MkDocs

Версия: 1.0
Дата: 09.05.2025
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path


def check_dependencies():
    """Проверка наличия необходимых зависимостей"""
    try:
        import mkdocs
        print(f"MkDocs установлен: {mkdocs.__version__}")
    except ImportError:
        print("MkDocs не установлен. Установка...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "mkdocs", "mkdocs-material", "pymdown-extensions"])
            print("MkDocs успешно установлен.")
        except subprocess.CalledProcessError:
            print("Ошибка при установке MkDocs. Пожалуйста, установите вручную: pip install mkdocs mkdocs-material pymdown-extensions")
            sys.exit(1)


def create_mkdocs_config():
    """Создание конфигурационного файла MkDocs"""
    current_dir = Path.cwd()
    config_path = current_dir / "mkdocs.yml"
    
    config_content = """
site_name: Daur-AI Documentation
site_description: Документация для универсального автономного ИИ-агента Daur-AI
site_author: Daur-AI Team
site_url: https://daur-ai.com

theme:
  name: material
  language: ru
  palette:
    primary: indigo
    accent: indigo
  font:
    text: Roboto
    code: Roboto Mono
  features:
    - navigation.instant
    - navigation.tracking
    - navigation.tabs
    - navigation.sections
    - toc.integrate
    - search.suggest
    - search.highlight
    
markdown_extensions:
  - pymdownx.highlight
  - pymdownx.superfences
  - pymdownx.tabbed
  - pymdownx.tasklist:
      custom_checkbox: true
  - admonition
  - toc:
      permalink: true
  - footnotes
  - meta
  - def_list
  - attr_list
  - md_in_html
  - tables

nav:
  - Главная: index.md
  - Руководство пользователя:
    - Введение: user/index.md
    - Установка: user/installation.md
    - Первые шаги: user/getting_started.md
    - Функции: user/features.md
    - FAQ: user/faq.md
  - Разработчикам:
    - Обзор: dev/index.md
    - Архитектура: dev/architecture.md
    - API Reference: dev/api_reference.md
    - Вклад в проект: dev/contributing.md
  - О проекте:
    - Изменения: about/changelog.md
    - Лицензия: about/license.md
    - Команда: about/team.md
"""
    
    with open(config_path, 'w', encoding='utf-8') as f:
        f.write(config_content.strip())
    
    print(f"Конфигурационный файл MkDocs создан: {config_path}")
    return config_path


def prepare_docs_structure():
    """Подготовка структуры документации"""
    current_dir = Path.cwd()
    docs_dir = current_dir / "mkdocs" / "docs"
    
    # Создание структуры директорий
    os.makedirs(docs_dir, exist_ok=True)
    os.makedirs(docs_dir / "user", exist_ok=True)
    os.makedirs(docs_dir / "dev", exist_ok=True)
    os.makedirs(docs_dir / "about", exist_ok=True)
    
    # Создание главной страницы
    with open(docs_dir / "index.md", 'w', encoding='utf-8') as f:
        f.write("""# Daur-AI

**Универсальный автономный ИИ-агент для локального компьютера**

## О проекте

Daur-AI — это универсальный автономный ИИ-агент, который выполняет любые задачи пользователя на локальном компьютере. 
Агент работает на Windows и macOS, поддерживает адаптивное обучение и взаимодействует с пользователем через текстовые команды.

## Особенности

- **Универсальность**: выполняет широкий спектр задач через текстовые команды
- **Автономность**: вся работа выполняется локально на компьютере пользователя
- **Адаптивность**: обучается на основе пользовательских действий
- **Безопасность**: не передает данные внешним сервисам
- **Кроссплатформенность**: поддержка Windows и macOS

## Начало работы

Для начала работы с Daur-AI, ознакомьтесь с нашим [руководством по установке](user/installation.md) и [первыми шагами](user/getting_started.md).

## Для разработчиков

Если вы хотите участвовать в разработке Daur-AI, ознакомьтесь с нашей [документацией для разработчиков](dev/index.md).
""")
    
    # Копирование существующей документации
    existing_docs = {
        current_dir / "docs" / "user" / "user_manual.md": docs_dir / "user" / "index.md",
        current_dir / "docs" / "dev" / "developer_guide.md": docs_dir / "dev" / "index.md",
        current_dir / "docs" / "dev" / "api_reference.md": docs_dir / "dev" / "api_reference.md",
        current_dir / "CONTRIBUTING.md": docs_dir / "dev" / "contributing.md",
        current_dir / "CHANGELOG.md": docs_dir / "about" / "changelog.md",
        current_dir / "LICENSE": docs_dir / "about" / "license.md"
    }
    
    for src, dst in existing_docs.items():
        if src.exists():
            shutil.copy2(src, dst)
            print(f"Копирование {src} в {dst}")
    
    # Создание базовых страниц
    base_pages = {
        docs_dir / "user" / "installation.md": """# Установка Daur-AI

## Системные требования

- **ОС**: Windows 10+ или macOS 11.0+
- **CPU**: 4 ядра, 2.5 GHz или выше
- **RAM**: Минимум 8 GB (рекомендуется 16 GB)
- **Место на диске**: 4 GB свободного места

## Windows

1. Загрузите установщик `Daur-AI-Setup.exe`
2. Запустите установку и следуйте инструкциям
3. После установки запустите Daur-AI через ярлык на рабочем столе или в меню "Пуск"

## macOS

1. Загрузите файл `Daur-AI.dmg`
2. Откройте образ диска и перетащите приложение в папку "Программы"
3. При первом запуске может потребоваться разрешить запуск (Системные настройки → Безопасность и конфиденциальность)

## Linux

1. Загрузите скрипт установки `install_linux.sh`
2. Сделайте скрипт исполняемым: `chmod +x install_linux.sh`
3. Запустите скрипт с правами администратора: `sudo ./install_linux.sh`
4. После установки запустите Daur-AI командой `daur-ai`

## Установка из исходного кода

Требования:
- Python 3.8 или выше
- pip (менеджер пакетов Python)

```bash
# Клонирование репозитория
git clone https://github.com/yourusername/Daur-AI-v1.git
cd Daur-AI-v1

# Установка зависимостей
pip install -r requirements.txt

# Запуск приложения
python src/main.py
```

## Проверка установки

После установки вы должны увидеть приветственное сообщение Daur-AI и приглашение для ввода команды. Для проверки работы агента введите простую команду, например `help`.
""",
        docs_dir / "user" / "getting_started.md": """# Первые шаги с Daur-AI

## Запуск Daur-AI

После [установки](installation.md) вы можете запустить Daur-AI следующими способами:

### Windows
- Используйте ярлык на рабочем столе или в меню "Пуск"
- Запустите `Daur-AI.exe` из директории установки

### macOS
- Запустите приложение из папки "Программы"
- Используйте Spotlight (Command+Space) и введите "Daur-AI"

### Linux
- Запустите команду `daur-ai` в терминале

## Выбор интерфейса

Daur-AI предлагает два типа интерфейса:

### Консольный интерфейс (по умолчанию)

```bash
daur-ai --ui console
```

### Графический интерфейс

```bash
daur-ai --ui gui
```

## Первая команда

После запуска вы увидите приветственное сообщение и приглашение для ввода команды. Попробуйте ввести:

```
help
```

Это отобразит список доступных команд и возможностей Daur-AI.

## Примеры простых команд

Вот несколько примеров команд для начала работы:

### Работа с системой

```
открой блокнот
покажи текущее время
создай папку Documents/daur-test
```

### Автоматизация ввода

```
нажми Win+R и напечатай notepad
кликни на кнопку "Отмена"
напечатай "Привет, мир!"
```

### Работа с файлами

```
создай файл hello.txt с текстом "Привет, мир!"
прочитай файл hello.txt
запиши "Новое содержимое" в файл hello.txt
```

## Следующие шаги

- Изучите полный список [возможностей](features.md) Daur-AI
- Ознакомьтесь с часто задаваемыми [вопросами](faq.md)
- Попробуйте создать свои цепочки команд для автоматизации повторяющихся задач
""",
        docs_dir / "user" / "features.md": """# Функции и возможности Daur-AI

## Управление мышью и клавиатурой

Daur-AI может эмулировать действия мыши и клавиатуры, что позволяет автоматизировать взаимодействие с любыми приложениями.

### Действия мыши

- **Клик**: `кликни по кнопке "Сохранить"`
- **Двойной клик**: `двойной клик по файлу report.docx`
- **Перемещение мыши**: `перемести мышь на координаты 100, 200`
- **Скроллинг**: `прокрути страницу вниз`

### Действия клавиатуры

- **Ввод текста**: `напечатай "Привет, мир!"`
- **Нажатие клавиш**: `нажми Enter`, `нажми клавишу Tab`
- **Комбинации клавиш**: `нажми Ctrl+S`, `нажми Alt+Tab`

## Управление приложениями

### Запуск и закрытие

- **Запуск**: `открой приложение Chrome`
- **Закрытие**: `закрой программу Блокнот`
- **Переключение**: `переключись на Excel`

## Управление файлами

### Операции с файлами

- **Создание**: `создай файл report.txt с текстом "Ежемесячный отчет"`
- **Чтение**: `прочитай содержимое файла config.json`
- **Запись**: `запиши "Новые данные" в файл output.txt`
- **Удаление**: `удали файл temp.log`

### Операции с директориями

- **Создание**: `создай папку Projects/NewProject`
- **Просмотр**: `покажи содержимое папки Documents`
- **Удаление**: `удали пустую папку OldProject`

## Сложные команды

Daur-AI поддерживает сложные команды, состоящие из нескольких действий:

```
открой блокнот, напечатай "Важная заметка", нажми Ctrl+S, напечатай "заметка.txt" и нажми Enter
```

## Особенности обработки команд

- **Контекстная интерпретация**: Daur-AI анализирует контекст и определяет наиболее подходящие действия
- **Исправление ошибок**: автоматическое исправление опечаток и неточностей в командах
- **Интеллектуальное распознавание элементов интерфейса**: поиск кнопок, полей ввода и других элементов по их описанию

## Расширенные возможности

### Режим песочницы

Для безопасного тестирования потенциально опасных команд:

```
daur-ai --sandbox
```

### Экспорт логов

Для анализа истории команд и действий:

```
daur-ai --export-logs path/to/export.csv
```

### Обучение модели

Для улучшения работы на основе ваших команд:

```
daur-ai --train
```
""",
        docs_dir / "user" / "faq.md": """# Часто задаваемые вопросы

## Общие вопросы

### Что такое Daur-AI?

Daur-AI — это универсальный автономный ИИ-агент, который выполняет задачи на вашем компьютере через текстовые команды. Он может управлять мышью, клавиатурой, файлами и приложениями, эмулируя действия пользователя.

### Чем Daur-AI отличается от других ассистентов?

Daur-AI работает полностью локально, не требует подключения к интернету и может взаимодействовать с любыми приложениями на вашем компьютере. В отличие от других решений, он не ограничен API или плагинами.

### Daur-AI заменяет программистов?

Нет. Daur-AI — это инструмент для автоматизации задач, который помогает программистам и пользователям, но не заменяет их. Для сложных задач всегда требуется человеческое участие.

## Установка и настройка

### Какие системные требования у Daur-AI?

- **ОС**: Windows 10+ или macOS 11.0+
- **CPU**: 4 ядра, 2.5 GHz или выше
- **RAM**: Минимум 8 GB (рекомендуется 16 GB)
- **Место на диске**: 4 GB свободного места

### Можно ли использовать Daur-AI на Linux?

Да, Daur-AI поддерживает основные дистрибутивы Linux, хотя некоторые функции могут работать иначе из-за различий в системных API.

### Где хранятся настройки Daur-AI?

Настройки хранятся в директории `~/.daur_ai/` (Linux/macOS) или `%USERPROFILE%\\.daur_ai\\` (Windows).

## Использование

### Что делать, если Daur-AI не понимает мою команду?

Попробуйте:
1. Использовать более конкретные формулировки
2. Разбить сложную команду на несколько простых
3. Проверить, что запрашиваемое действие поддерживается

### Может ли Daur-AI выполнять опасные действия?

Daur-AI имеет встроенные ограничения для предотвращения опасных действий. Некоторые системные директории и команды заблокированы по умолчанию.

### Может ли Daur-AI работать с любыми приложениями?

Да, Daur-AI может взаимодействовать с любым приложением, которое имеет графический интерфейс или командную строку. Однако качество взаимодействия может зависеть от особенностей конкретного приложения.

### Нужен ли интернет для работы Daur-AI?

Нет, Daur-AI работает полностью локально и не требует подключения к интернету.

## Функциональность

### Как Daur-AI взаимодействует с элементами интерфейса?

Daur-AI использует три основных подхода:
1. Поиск по координатам на экране
2. Поиск по тексту и визуальным признакам
3. Использование системных API для взаимодействия

### Может ли Daur-AI работать с несколькими мониторами?

Да, Daur-AI поддерживает системы с несколькими мониторами и может перемещать мышь между ними.

### Можно ли настроить Daur-AI на выполнение периодических задач?

В текущей версии нет встроенного планировщика задач, но вы можете использовать системные средства (Windows Task Scheduler, cron) для запуска Daur-AI с определенными командами.

## Безопасность и конфиденциальность

### Отправляет ли Daur-AI данные на внешние серверы?

Нет, Daur-AI работает полностью локально и не отправляет данные на внешние серверы.

### Как Daur-AI защищает мои данные?

Daur-AI работает только с теми файлами и приложениями, которые вы явно указываете в командах. Все операции выполняются локально на вашем компьютере.

### Что такое режим песочницы?

Режим песочницы запускает Daur-AI в изолированном окружении, что позволяет безопасно тестировать потенциально опасные команды без риска для основной системы.

## Устранение неполадок

### Что делать, если Daur-AI не запускается?

1. Проверьте системные требования
2. Убедитесь, что все зависимости установлены
3. Проверьте пути установки и права доступа
4. Попробуйте запустить с флагом `--debug`

### Как получить журналы ошибок?

Журналы находятся в директории `~/.daur_ai/logs/` (Linux/macOS) или `%USERPROFILE%\\.daur_ai\\logs\\` (Windows).

### Daur-AI не видит определенное приложение. Что делать?

1. Убедитесь, что приложение запущено и видимо
2. Попробуйте использовать полный путь к приложению
3. Для некоторых приложений могут требоваться повышенные права доступа
""",
        docs_dir / "dev" / "architecture.md": """# Архитектура Daur-AI

## Обзор

Daur-AI построен по модульной архитектуре, что обеспечивает легкую расширяемость и кроссплатформенность. Каждый компонент отвечает за определенную часть функциональности и взаимодействует с другими через четко определенные интерфейсы.

## Структура проекта

```
src/
  ├── main.py                    # Точка входа в приложение
  ├── agent/
  │   └── core.py                # Ядро агента
  ├── ai/
  │   ├── model_manager.py       # Управление ИИ-моделями
  │   └── trainer.py             # Обучение моделей на логах
  ├── apps/
  │   └── manager.py             # Управление приложениями
  ├── config/
  │   └── settings.py            # Модуль настроек
  ├── files/
  │   └── manager.py             # Операции с файлами
  ├── input/
  │   └── controller.py          # Управление вводом
  ├── logger/
  │   ├── logger.py              # Логирование
  │   └── exporter.py            # Экспорт логов
  ├── parser/
  │   └── command_parser.py      # Парсинг команд
  ├── platforms/                 # Платформенно-зависимый код
  │   ├── common/
  │   ├── windows/
  │   └── macos/
  └── ui/
      ├── console.py             # Консольный интерфейс
      └── gui.py                 # Графический интерфейс
```

## Основные компоненты

### 1. Ядро агента (Agent Core)

Центральный компонент, координирующий работу всех остальных модулей. Обрабатывает команды пользователя, организует их исполнение и возвращает результаты.

### 2. Парсер команд (Command Parser)

Преобразует команды на естественном языке в структурированные действия, которые может выполнить агент. Использует регулярные выражения для простых команд и модели ИИ для сложных.

### 3. ИИ-компоненты (AI Components)

Управляют локальными моделями ИИ для интерпретации команд и принятия решений. Поддерживают различные форматы моделей (GGUF, PyTorch) и обеспечивают их эффективную загрузку.

### 4. Контроллеры ввода-вывода (I/O Controllers)

Управляют взаимодействием с системой:
- **Input Controller**: эмуляция мыши и клавиатуры
- **App Manager**: управление приложениями
- **File Manager**: операции с файлами

### 5. Платформенно-зависимые модули

Реализуют взаимодействие с конкретными операционными системами через унифицированные интерфейсы:
- **Windows**: использует Win32 API, pywin32
- **macOS**: использует Objective-C bridges, AppleScript
- **Common**: общие абстракции и интерфейсы

### 6. Пользовательские интерфейсы

Обеспечивают взаимодействие с пользователем:
- **Console UI**: текстовый интерфейс с поддержкой историй команд и цветного вывода
- **Graphical UI**: GUI на основе Tkinter с темами оформления и богатым функционалом

### 7. Система логирования

Записывает все действия агента и результаты их выполнения для отладки, аудита и обучения моделей.

## Жизненный цикл выполнения команды

1. **Получение команды**: Пользователь вводит команду через UI
2. **Парсинг команды**: Command Parser преобразует текст в структурированные действия
3. **Валидация**: Проверка безопасности и корректности действий
4. **Выполнение**: Ядро агента передает действия соответствующим контроллерам
5. **Логирование**: Записываются все действия и их результаты
6. **Возврат результата**: Результат отображается пользователю через UI

## Диаграмма взаимодействия компонентов

```
+-------+      +---------+      +----------+
|  UI   | <--> |  Agent  | <--> |  Parser  |
+-------+      |  Core   |      +----------+
               |         |           ^
               |         |           |
               |         |      +----------+
               |         | <--> |    AI    |
               |         |      |  Models  |
               |         |      +----------+
               |         |
+-------+      |         |      +----------+
|Logger | <--> |         | <--> |  Input   |
+-------+      |         |      |Controller|
               |         |      +----------+
               |         |
+-------+      |         |      +----------+
|Config | <--> |         | <--> |   App    |
+-------+      |         |      | Manager  |
               |         |      +----------+
               |         |
               |         |      +----------+
               |         | <--> |  File    |
               +---------+      | Manager  |
                                +----------+
```

## Кроссплатформенность

Кроссплатформенность обеспечивается через систему абстракций и платформенно-зависимых реализаций:

```
+----------------+      +----------------+      +----------------+
|                |      |                |      |                |
|  Generic API   | <--> | Platform Layer | <--> |  System API    |
|                |      |                |      |                |
+----------------+      +----------------+      +----------------+
                             ^
                             |
                 +-----------+-----------+
                 |           |           |
          +------+------+    |    +------+------+
          |             |    |    |             |
          |  Windows    |    |    |   macOS     |
          |             |    |    |             |
          +-------------+    |    +-------------+
                             |
                        +----+-----+
                        |          |
                        |  Linux   |
                        |          |
                        +----------+
```

## Расширяемость

Архитектура Daur-AI спроектирована с учетом легкой расширяемости:

1. **Плагины**: возможность добавления плагинов для новых функций
2. **Новые платформы**: добавление поддержки новых ОС через реализацию абстрактных интерфейсов
3. **Новые модели ИИ**: поддержка дополнительных форматов моделей
4. **Новые команды**: расширение парсера для поддержки новых типов команд
""",
        docs_dir / "about" / "team.md": """# Команда Daur-AI

## Основатели

### Иван Петров
**Ведущий разработчик**

Специалист по искусственному интеллекту с 10-летним опытом в разработке систем машинного обучения и автоматизации. Выпускник МГУ им. М.В. Ломоносова, кафедра вычислительной математики и кибернетики.

### Анна Соколова
**Руководитель проекта**

Эксперт по управлению ИТ-проектами с опытом запуска успешных продуктов в сфере искусственного интеллекта. MBA, ВШЭ. Ранее работала в Яндексе и Mail.ru Group.

### Александр Кузнецов
**Ведущий инженер по архитектуре**

Разработчик с 15-летним опытом работы над распределенными системами и приложениями для ПК. Специалист по кроссплатформенной разработке. Автор нескольких книг по системной архитектуре.

## Команда разработчиков

### Дмитрий Волков
**Разработчик компонентов GUI**

Специалист по пользовательским интерфейсам с глубокими знаниями в области UX/UI дизайна. Разрабатывает графические интерфейсы для Daur-AI.

### Елена Новикова
**ML-инженер**

Эксперт по глубокому обучению и NLP. Отвечает за разработку и обучение моделей для интерпретации команд пользователя.

### Сергей Морозов
**Инженер по платформенной интеграции**

Отвечает за интеграцию с различными операционными системами и обеспечение кроссплатформенной совместимости.

### Мария Козлова
**Инженер по контролю качества**

Разрабатывает и внедряет системы тестирования для обеспечения надежности и качества работы Daur-AI.

## Консультанты

### Проф. Николай Сидоров
**Научный консультант по ИИ**

Доктор физико-математических наук, автор более 100 научных работ в области искусственного интеллекта и машинного обучения.

### Татьяна Белова
**Консультант по пользовательскому опыту**

Эксперт по UX-исследованиям с опытом работы в крупнейших технологических компаниях. Помогает сделать Daur-AI интуитивно понятным для пользователей.

## Присоединиться к команде

Мы всегда в поиске талантливых людей, увлеченных технологиями и искусственным интеллектом. Если вы хотите внести свой вклад в развитие Daur-AI, посетите наш [раздел вакансий](https://daur-ai.com/careers) или напишите нам на [careers@daur-ai.com](mailto:careers@daur-ai.com).

## Благодарности

Особая благодарность всем контрибьютерам, тестировщикам и пользователям, чьи идеи и отзывы помогают нам делать Daur-AI лучше с каждым днем.
"""
    }
    
    for file_path, content in base_pages.items():
        if not file_path.exists():
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"Создан файл: {file_path}")
    
    return docs_dir


def build_docs(config_path=None):
    """Сборка документации с использованием MkDocs"""
    if not config_path:
        config_path = create_mkdocs_config()
    
    # Запуск команды сборки
    try:
        result = subprocess.run(
            ["mkdocs", "build", "-f", str(config_path)], 
            capture_output=True, 
            text=True,
            check=True
        )
        print(result.stdout)
        print("Документация успешно собрана!")
        print(f"Результаты сборки находятся в директории: {Path.cwd() / 'site'}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"Ошибка при сборке документации: {e}")
        print(e.stderr)
        return False


def serve_docs(config_path=None, port=8000):
    """Запуск сервера для просмотра документации"""
    if not config_path:
        config_path = create_mkdocs_config()
    
    print(f"Запуск сервера документации на порту {port}...")
    print("Для доступа к документации откройте браузер по адресу: http://localhost:{port}")
    print("Для остановки сервера нажмите Ctrl+C")
    
    try:
        subprocess.run(
            ["mkdocs", "serve", "-f", str(config_path), "-a", f"localhost:{port}"],
            check=True
        )
    except KeyboardInterrupt:
        print("\nСервер остановлен.")
    except subprocess.CalledProcessError as e:
        print(f"Ошибка при запуске сервера: {e}")
        return False
    
    return True


def main():
    """Основная точка входа"""
    # Проверка зависимостей
    check_dependencies()
    
    # Подготовка структуры документации
    prepare_docs_structure()
    
    # Создание конфигурации MkDocs
    config_path = create_mkdocs_config()
    
    # Парсинг аргументов командной строки
    import argparse
    parser = argparse.ArgumentParser(description="Сборка документации Daur-AI")
    parser.add_argument("--build", action="store_true", help="Только собрать документацию")
    parser.add_argument("--serve", action="store_true", help="Запустить сервер для просмотра документации")
    parser.add_argument("--port", type=int, default=8000, help="Порт для сервера документации")
    
    args = parser.parse_args()
    
    # Выполнение команд в зависимости от аргументов
    if args.build:
        build_docs(config_path)
    elif args.serve:
        serve_docs(config_path, args.port)
    else:
        # По умолчанию собираем и запускаем сервер
        if build_docs(config_path):
            serve_docs(config_path, args.port)


if __name__ == "__main__":
    main()
