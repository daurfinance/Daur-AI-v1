#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Daur-AI: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Ollama –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ LLM –º–æ–¥–µ–ª—è–º–∏

–í–µ—Ä—Å–∏—è: 1.1
–î–∞—Ç–∞: 01.10.2025
"""

import sys
import os
import time
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.ai.ollama_model import OllamaModelManager, OllamaConfig
from src.ai.enhanced_model_manager import EnhancedModelManager
from src.config.settings import load_config


def setup_demo_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout)
        ]
    )


def demo_ollama_direct():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä—è–º–æ–π —Ä–∞–±–æ—Ç—ã —Å Ollama"""
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–Ø–ú–û–ô –†–ê–ë–û–¢–´ –° OLLAMA")
    print("="*60)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ Ollama –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        config = OllamaConfig(
            host="http://localhost:11434",
            model="llama3.2",
            timeout=30
        )
        
        ollama = OllamaModelManager(config)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if not ollama.is_available():
            print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
            print("   1. Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: curl -fsSL https://ollama.ai/install.sh | sh")
            print("   2. Ollama –∑–∞–ø—É—â–µ–Ω–∞: ollama serve")
            print("   3. –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ollama pull llama3.2")
            return False
        
        print("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        models = ollama.list_models()
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {models}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω—É–∂–Ω–æ–π –º–æ–¥–µ–ª–∏
        if config.model not in models:
            print(f"üì• –ú–æ–¥–µ–ª—å {config.model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—ã—Ç–∞—é—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å...")
            if ollama.pull_model(config.model):
                print(f"‚úÖ –ú–æ–¥–µ–ª—å {config.model} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å {config.model}")
                return False
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:")
        test_prompt = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        response = ollama.generate_text(test_prompt)
        print(f"–ü—Ä–æ–º–ø—Ç: {test_prompt}")
        print(f"–û—Ç–≤–µ—Ç: {response[:200]}...")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥:")
        test_commands = [
            "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ø—Ä–∏–≤–µ—Ç –º–∏—Ä",
            "–æ—Ç–∫—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä firefox",
            "–Ω–∞–ø–µ—á–∞—Ç–∞–π —Ç–µ–∫—Å—Ç hello world"
        ]
        
        for command in test_commands:
            print(f"\n–ö–æ–º–∞–Ω–¥–∞: '{command}'")
            actions = ollama.parse_command(command)
            print(f"–î–µ–π—Å—Ç–≤–∏—è: {actions}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞:")
        context = []
        
        messages = [
            "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å –¥–µ–ª–∞—Ç—å?",
            "–ü–æ–º–æ–≥–∏ –º–Ω–µ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª"
        ]
        
        for message in messages:
            print(f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}")
            response = ollama.chat(message, context)
            print(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response[:150]}...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.append({
                "user": message,
                "assistant": response
            })
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Ollama: {e}")
        import traceback
        traceback.print_exc()
        return False


def demo_enhanced_manager():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û AI –ú–ï–ù–ï–î–ñ–ï–†–ê")
    print("="*60)
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        ai_manager = EnhancedModelManager(config)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
        available_models = ai_manager.get_available_models()
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {available_models}")
        
        model_info = ai_manager.get_model_info()
        print(f"üîß –ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {model_info}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ Enhanced Manager:")
        test_commands = [
            "—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É –Ω–æ–≤—ã–π_–ø—Ä–æ–µ–∫—Ç",
            "–æ—Ç–∫—Ä–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä",
            "–ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
            "—É–¥–∞–ª–∏ —Ñ–∞–π–ª —Å—Ç–∞—Ä—ã–π.txt",
            "–Ω–∞–ø–∏—à–∏ –≤ —Ñ–∞–π–ª readme.md —Ç–µ–∫—Å—Ç '–≠—Ç–æ –º–æ–π –ø—Ä–æ–µ–∫—Ç'"
        ]
        
        for command in test_commands:
            print(f"\n–ö–æ–º–∞–Ω–¥–∞: '{command}'")
            try:
                actions = ai_manager.parse_command(command)
                for i, action in enumerate(actions, 1):
                    print(f"  –î–µ–π—Å—Ç–≤–∏–µ {i}: {action}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:")
        prompts = [
            "–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π Python —Å–∫—Ä–∏–ø—Ç?",
            "–ö–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É –ª–æ–∫–∞–ª—å–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π?"
        ]
        
        for prompt in prompts:
            print(f"\n–ü—Ä–æ–º–ø—Ç: {prompt}")
            try:
                response = ai_manager.generate_text(prompt)
                print(f"–û—Ç–≤–µ—Ç: {response[:200]}...")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        ai_manager.cleanup()
        print("\n‚úÖ Enhanced Manager –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Enhanced Manager: {e}")
        import traceback
        traceback.print_exc()
        return False


def demo_agent_with_ollama():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ —Å Ollama"""
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–ì–ï–ù–¢–ê –° OLLAMA")
    print("="*60)
    
    try:
        from src.agent.core import DaurAgent
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        agent = DaurAgent(config, ui_mode="console", sandbox=True)
        print("‚úÖ –ê–≥–µ–Ω—Ç —Å Ollama —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± AI –º–æ–¥–µ–ª–∏
        if hasattr(agent.ai_manager, 'get_model_info'):
            model_info = agent.ai_manager.get_model_info()
            print(f"üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏: {model_info}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        test_commands = [
            "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª hello.py —Å –∫–æ–¥–æ–º print('Hello, Ollama!')",
            "–ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤",
            "–æ—Ç–∫—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä",
            "help"
        ]
        
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞:")
        for command in test_commands:
            print(f"\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: '{command}'")
            try:
                response = agent.handle_command(command)
                print(f"–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞: {response}")
                time.sleep(1)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        agent.cleanup()
        print("\n‚úÖ –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∞–≥–µ–Ω—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø OLLAMA –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í DAUR-AI")
    print("–õ–æ–∫–∞–ª—å–Ω—ã–µ LLM –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞")
    print("="*60)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_demo_logging()
    
    success_count = 0
    total_tests = 3
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä—è–º–æ–π —Ä–∞–±–æ—Ç—ã —Å Ollama
        if demo_ollama_direct():
            success_count += 1
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Enhanced Manager
        if demo_enhanced_manager():
            success_count += 1
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —Å Ollama
        if demo_agent_with_ollama():
            success_count += 1
        
        print("\n" + "="*60)
        print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        print("="*60)
        
        if success_count == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("\nOllama –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print("Daur-AI —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ LLM –º–æ–¥–µ–ª–∏!")
        elif success_count > 0:
            print("‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•")
            print("\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
        else:
            print("‚ùå –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨")
            print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("1. Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            print("2. –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
        
        print("\nüìö –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  ollama serve                    # –ó–∞–ø—É—Å–∫ Ollama —Å–µ—Ä–≤–µ—Ä–∞")
        print("  ollama pull llama3.2           # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏")
        print("  ollama list                    # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
        print("  python3 src/main.py --ui console  # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞")
        
    except KeyboardInterrupt:
        print("\n\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
