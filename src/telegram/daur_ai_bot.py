#!/usr/bin/env python3
"""
Daur-AI Telegram Bot
–£–¥–∞–ª–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI-–∞–≥–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ Telegram —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—É–¥–∏–æ, —Ñ–∞–π–ª–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞
"""

import os
import sys
import logging
import asyncio
import json
import tempfile
import subprocess
from datetime import datetime
from typing import Dict, List, Optional, Any
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, ConversationHandler
)

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
try:
    from agent.integrated_ai_agent import IntegratedAIAgent, Task, TaskPriority
    from config.settings import Settings
except ImportError as e:
    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")

class DaurAITelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Daur-AI –∞–≥–µ–Ω—Ç–æ–º"""
    
    def __init__(self, token: str, allowed_users: List[int] = None):
        self.token = token
        self.allowed_users = allowed_users or []
        self.ai_agent = None
        self.active_sessions = {}
        self.task_history = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO
        )
        self.logger = logging.getLogger(__name__)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        self.temp_dir = Path(tempfile.gettempdir()) / "daur_ai_bot"
        self.temp_dir.mkdir(exist_ok=True)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
        self.WAITING_FOR_TASK = 1
        self.WAITING_FOR_CONFIG = 2
        
    async def initialize_agent(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∞–≥–µ–Ω—Ç–∞"""
        try:
            self.ai_agent = IntegratedAIAgent()
            await self.ai_agent.initialize()
            self.logger.info("AI –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –∞–≥–µ–Ω—Ç–∞: {e}")
            self.ai_agent = None
    
    def check_user_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.allowed_users:
            return True  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö
        return user_id in self.allowed_users
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        
        if not self.check_user_access(user.id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É."
            )
            return
        
        welcome_text = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Daur-AI Bot!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞–≥–µ–Ω—Ç.

**–ß—Ç–æ —è —É–º–µ—é:**
üß† –í—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
üëÅÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —ç–∫—Ä–∞–Ω
üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è
üìÅ –†–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/tasks - –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
‚Ä¢ –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
                InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data="tasks")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ Daur-AI Bot**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –°—Ç–∞—Ç—É—Å AI –∞–≥–µ–Ω—Ç–∞ –∏ —Å–∏—Å—Ç–µ–º—ã
/tasks - –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
/agent_start - –ó–∞–ø—É—Å—Ç–∏—Ç—å AI –∞–≥–µ–Ω—Ç–∞
/agent_stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AI –∞–≥–µ–Ω—Ç–∞

**–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:**

üó£Ô∏è **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è**
–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã - —è –∏—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –≤—ã–ø–æ–ª–Ω—é

üìù **–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è**
–ü–∏—à–∏—Ç–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ:
‚Ä¢ "–°–æ–∑–¥–∞–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–ª–∞–Ω–æ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
‚Ä¢ "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python"
‚Ä¢ "–°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"

üìÅ **–§–∞–π–ª—ã**
–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã - –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –ê—É–¥–∏–æ - –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
‚Ä¢ –ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –æ—Ç—á–µ—Ç–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã

**–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è —á–∞—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
–ë–æ—Ç –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            system_status = await self.get_system_status()
            agent_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if self.ai_agent else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            
            status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Daur-AI**

ü§ñ **AI –ê–≥–µ–Ω—Ç:** {agent_status}
üíª **CPU:** {system_status.get('cpu', 'N/A')}%
üß† **–ü–∞–º—è—Ç—å:** {system_status.get('memory', 'N/A')}%
üíæ **–î–∏—Å–∫:** {system_status.get('disk', 'N/A')}%
üìä **–ü—Ä–æ—Ü–µ—Å—Å—ã:** {system_status.get('processes', 'N/A')}

üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:** {len(self.active_sessions)}
üìà **–í—Å–µ–≥–æ –∑–∞–¥–∞—á:** {len(self.task_history)}

üïê **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status"),
                    InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data="start_agent")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                status_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /tasks - –∏—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á"""
        if not self.task_history:
            await update.message.reply_text("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á –ø—É—Å—Ç–∞")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–¥–∞—á
        recent_tasks = self.task_history[-10:]
        
        tasks_text = "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:**\n\n"
        for i, task in enumerate(recent_tasks, 1):
            status_emoji = "‚úÖ" if task.get('status') == 'completed' else "‚è≥"
            tasks_text += f"{status_emoji} **{i}.** {task.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            tasks_text += f"   ‚è∞ {task.get('timestamp', 'N/A')}\n\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_tasks"),
                InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="task_details")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            tasks_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        
        if not self.check_user_access(user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        message_text = update.message.text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à—É –∑–∞–¥–∞—á—É...")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ AI –∞–≥–µ–Ω—Ç–∞
            result = await self.execute_task(message_text, user.id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.task_history.append({
                'description': message_text,
                'user_id': user.id,
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'status': 'completed' if result.get('success') else 'failed',
                'result': result
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get('success'):
                response_text = f"‚úÖ **–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**\n\n{result.get('message', '–ì–æ—Ç–æ–≤–æ')}"
            else:
                response_text = f"‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [
                    InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏", callback_data=f"task_result_{len(self.task_history)-1}"),
                    InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"repeat_task_{len(self.task_history)-1}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                response_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        
        if not self.check_user_access(user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        await update.message.reply_text("üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice_file = await update.message.voice.get_file()
            voice_path = self.temp_dir / f"voice_{user.id}_{datetime.now().timestamp()}.ogg"
            
            await voice_file.download_to_drive(voice_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            text = await self.speech_to_text(voice_path)
            
            if text:
                await update.message.reply_text(f"üó£Ô∏è **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:** {text}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—É—é
                context.user_data['voice_text'] = text
                await self.handle_text_message_from_voice(update, context, text)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            voice_path.unlink(missing_ok=True)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤"""
        user = update.effective_user
        
        if not self.check_user_access(user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        document = update.message.document
        await update.message.reply_text(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {document.file_name}")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await document.get_file()
            file_path = self.temp_dir / f"doc_{user.id}_{document.file_name}"
            
            await file.download_to_drive(file_path)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
            analysis = await self.analyze_file(file_path)
            
            response_text = f"""
üìÑ **–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞:** {document.file_name}
üìä **–†–∞–∑–º–µ—Ä:** {document.file_size} –±–∞–π—Ç
üîç **–¢–∏–ø:** {document.mime_type}

**–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**
{analysis}
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data=f"process_file_{file_path.name}"),
                    InlineKeyboardButton("üìã –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç", callback_data=f"extract_text_{file_path.name}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                response_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        user = update.effective_user
        
        if not self.check_user_access(user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        await update.message.reply_text("üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
            photo = update.message.photo[-1]
            file = await photo.get_file()
            
            photo_path = self.temp_dir / f"photo_{user.id}_{datetime.now().timestamp()}.jpg"
            await file.download_to_drive(photo_path)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            analysis = await self.analyze_image(photo_path)
            
            response_text = f"""
üñºÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**

{analysis}
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üîç OCR", callback_data=f"ocr_image_{photo_path.name}"),
                    InlineKeyboardButton("üé® –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"describe_image_{photo_path.name}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                response_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            photo_path.unlink(missing_ok=True)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "status":
            await self.status_callback(query, context)
        elif data == "tasks":
            await self.tasks_callback(query, context)
        elif data == "help":
            await self.help_callback(query, context)
        elif data == "start_agent":
            await self.start_agent_callback(query, context)
        elif data == "stop_agent":
            await self.stop_agent_callback(query, context)
        elif data.startswith("task_result_"):
            await self.task_result_callback(query, context, data)
        elif data.startswith("repeat_task_"):
            await self.repeat_task_callback(query, context, data)
        else:
            await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    async def execute_task(self, task_description: str, user_id: int) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ AI –∞–≥–µ–Ω—Ç–∞"""
        try:
            if not self.ai_agent:
                return {
                    'success': False,
                    'error': 'AI –∞–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /agent_start'
                }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task = Task(
                description=task_description,
                priority=TaskPriority.MEDIUM,
                user_id=str(user_id)
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
            result = await self.ai_agent.execute_task(task)
            
            return {
                'success': True,
                'message': result.get('message', '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'),
                'details': result
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    async def speech_to_text(self, audio_path: Path) -> Optional[str]:
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏–∑ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º manus-speech-to-text —É—Ç–∏–ª–∏—Ç—É
            result = subprocess.run([
                'manus-speech-to-text', str(audio_path)
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                return result.stdout.strip()
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {result.stderr}")
                return None
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ speech-to-text: {e}")
            return None
    
    async def analyze_file(self, file_path: Path) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            file_size = file_path.stat().st_size
            file_ext = file_path.suffix.lower()
            
            analysis = f"–†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç\n–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_ext}\n"
            
            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
            if file_ext in ['.txt', '.md', '.py', '.js', '.html', '.css']:
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    lines = len(content.splitlines())
                    chars = len(content)
                    analysis += f"–°—Ç—Ä–æ–∫: {lines}\n–°–∏–º–≤–æ–ª–æ–≤: {chars}"
            
            elif file_ext in ['.jpg', '.jpeg', '.png', '.gif', '.bmp']:
                analysis += "–¢–∏–ø: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n–ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å OCR –∏–ª–∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"
            
            elif file_ext in ['.pdf']:
                analysis += "–¢–∏–ø: PDF –¥–æ–∫—É–º–µ–Ω—Ç\n–ú–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            
            else:
                analysis += "–¢–∏–ø: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π\n–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
            
            return analysis
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"
    
    async def analyze_image(self, image_path: Path) -> str:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            from PIL import Image
            
            with Image.open(image_path) as img:
                width, height = img.size
                mode = img.mode
                format_name = img.format
                
                analysis = f"""
üìê **–†–∞–∑–º–µ—Ä—ã:** {width}x{height} –ø–∏–∫—Å–µ–ª–µ–π
üé® **–†–µ–∂–∏–º:** {mode}
üìÑ **–§–æ—Ä–º–∞—Ç:** {format_name}

üîç **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:**
‚Ä¢ OCR - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
‚Ä¢ –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                """
                
                return analysis.strip()
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"
    
    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            import psutil
            
            return {
                'cpu': round(psutil.cpu_percent(interval=1), 1),
                'memory': round(psutil.virtual_memory().percent, 1),
                'disk': round(psutil.disk_usage('/').percent, 1),
                'processes': len(psutil.pids())
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {}
    
    async def handle_text_message_from_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        class FakeMessage:
            def __init__(self, text):
                self.text = text
        
        class FakeUpdate:
            def __init__(self, message, user):
                self.message = message
                self.effective_user = user
        
        fake_update = FakeUpdate(FakeMessage(text), update.effective_user)
        await self.handle_text_message(fake_update, context)
    
    # Callback –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    async def status_callback(self, query, context):
        """Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            system_status = await self.get_system_status()
            agent_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if self.ai_agent else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            
            status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Daur-AI**

ü§ñ **AI –ê–≥–µ–Ω—Ç:** {agent_status}
üíª **CPU:** {system_status.get('cpu', 'N/A')}%
üß† **–ü–∞–º—è—Ç—å:** {system_status.get('memory', 'N/A')}%
üíæ **–î–∏—Å–∫:** {system_status.get('disk', 'N/A')}%

üïê **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.now().strftime('%H:%M:%S')}
            """
            
            await query.edit_message_text(status_text, parse_mode='Markdown')
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def start_agent_callback(self, query, context):
        """Callback –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
        try:
            if not self.ai_agent:
                await self.initialize_agent()
            
            if self.ai_agent:
                await query.edit_message_text("‚úÖ AI –∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å AI –∞–≥–µ–Ω—Ç–∞")
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("status", self.status_command))
        application.add_handler(CommandHandler("tasks", self.tasks_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        application.add_handler(MessageHandler(filters.VOICE, self.handle_voice_message))
        application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        asyncio.create_task(self.set_bot_commands(application.bot))
        
        self.logger.info("Daur-AI Telegram Bot –∑–∞–ø—É—â–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    
    async def set_bot_commands(self, bot):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
            BotCommand("status", "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
            BotCommand("tasks", "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á"),
            BotCommand("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
        ]
        
        await bot.set_my_commands(commands)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∫–æ–¥–µ")
        return
    
    # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    allowed_users_str = os.getenv('TELEGRAM_ALLOWED_USERS', '')
    allowed_users = []
    
    if allowed_users_str:
        try:
            allowed_users = [int(uid.strip()) for uid in allowed_users_str.split(',')]
        except ValueError:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TELEGRAM_ALLOWED_USERS")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = DaurAITelegramBot(token, allowed_users)
    
    try:
        bot.run()
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()
