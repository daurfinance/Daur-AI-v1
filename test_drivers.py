#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –¥—Ä–∞–π–≤–µ—Ä–æ–≤ Daur-AI
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
"""

import sys
import os
import time
import logging
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, '/home/ubuntu/Daur-AI-v1/src')

from drivers.screen_driver import ScreenDriver
from drivers.input_driver import InputDriver
from drivers.camera_driver import CameraDriver

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def test_screen_driver():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥—Ä–∞–π–≤–µ—Ä —ç–∫—Ä–∞–Ω–∞"""
    print("\n" + "="*50)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–†–ê–ô–í–ï–†–ê –≠–ö–†–ê–ù–ê")
    print("="*50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
        screen_driver = ScreenDriver()
        
        print(f"–î—Ä–∞–π–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {screen_driver.is_initialized}")
        print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —ç–∫—Ä–∞–Ω–µ: {screen_driver.get_screen_info()}")
        
        if screen_driver.is_initialized:
            # –ó–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–∞
            print("\n–ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä...")
            frame = screen_driver.capture_frame()
            
            if frame is not None and frame.size > 0:
                print(f"–ö–∞–¥—Ä –∑–∞—Ö–≤–∞—á–µ–Ω: {frame.shape}")
                
                # –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
                print("\n–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∑–∞—Ö–≤–∞—Ç (5 —Å–µ–∫—É–Ω–¥)...")
                screen_driver.start_continuous_capture(fps=10)
                
                time.sleep(5)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä
                latest_frame = screen_driver.get_latest_frame()
                if latest_frame is not None:
                    print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä: {latest_frame.shape}")
                
                screen_driver.stop_continuous_capture()
                print("–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –∫–∞–¥—Ä")
        
        # –û—á–∏—Å—Ç–∫–∞
        screen_driver.cleanup()
        print("‚úÖ –¢–µ—Å—Ç –¥—Ä–∞–π–≤–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞: {e}")

def test_input_driver():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥—Ä–∞–π–≤–µ—Ä –≤–≤–æ–¥–∞"""
    print("\n" + "="*50)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–†–ê–ô–í–ï–†–ê –í–í–û–î–ê")
    print("="*50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
        input_driver = InputDriver()
        
        device_list = input_driver.get_device_list()
        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {len(device_list['keyboards'])}")
        print(f"–ù–∞–π–¥–µ–Ω–æ –º—ã—à–µ–π: {len(device_list['mice'])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        for device_path, device_info in device_list['all_devices'].items():
            print(f"  {device_path}: {device_info['name']} ({device_info['type']})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if input_driver.virtual_keyboard_fd:
            print("\n‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ (–ø—Ä–æ–±–µ–ª)
            print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–∞...")
            input_driver.send_key_event(57, True)  # KEY_SPACE press
            time.sleep(0.1)
            input_driver.send_key_event(57, False)  # KEY_SPACE release
            
        if input_driver.virtual_mouse_fd:
            print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º—ã—à—å —Å–æ–∑–¥–∞–Ω–∞")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
            print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏...")
            input_driver.send_mouse_event(x=10, y=10)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        print("\n–ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π (3 —Å–µ–∫—É–Ω–¥—ã)...")
        input_driver.start_event_monitoring()
        
        time.sleep(3)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        events = input_driver.get_events()
        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
        
        for event in events[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–±—ã—Ç–∏–π
            print(f"  {event['device_type']}: type={event['type']}, code={event['code']}, value={event['value']}")
        
        input_driver.stop_event_monitoring()
        
        # –û—á–∏—Å—Ç–∫–∞
        input_driver.cleanup()
        print("‚úÖ –¢–µ—Å—Ç –¥—Ä–∞–π–≤–µ—Ä–∞ –≤–≤–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ –≤–≤–æ–¥–∞: {e}")

def test_camera_driver():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥—Ä–∞–π–≤–µ—Ä –∫–∞–º–µ—Ä—ã"""
    print("\n" + "="*50)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–†–ê–ô–í–ï–†–ê –ö–ê–ú–ï–†–´")
    print("="*50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
        camera_driver = CameraDriver()
        
        camera_list = camera_driver.get_camera_list()
        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä: {len(camera_list)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–µ—Ä–∞—Ö
        for device_path, camera_info in camera_list.items():
            print(f"  {device_path}: {camera_info['name']}")
            print(f"    –î—Ä–∞–π–≤–µ—Ä: {camera_info['driver']}")
            print(f"    –§–æ—Ä–º–∞—Ç—ã: {len(camera_info['formats'])}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞–º–µ—Ä—É
        if camera_list:
            first_camera = list(camera_list.keys())[0]
            print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É: {first_camera}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É
            if camera_driver.open_camera(first_camera, width=320, height=240):
                print("‚úÖ –ö–∞–º–µ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
                
                # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤
                print("–ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä—ã (5 —Å–µ–∫—É–Ω–¥)...")
                
                for i in range(10):
                    frame = camera_driver.capture_frame(first_camera)
                    if frame is not None:
                        print(f"  –ö–∞–¥—Ä {i+1}: {frame.shape}")
                    time.sleep(0.5)
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É
                camera_driver.close_camera(first_camera)
                print("–ö–∞–º–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É")
        else:
            print("‚ö†Ô∏è  –ö–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –û—á–∏—Å—Ç–∫–∞
        camera_driver.cleanup()
        print("‚úÖ –¢–µ—Å—Ç –¥—Ä–∞–π–≤–µ—Ä–∞ –∫–∞–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ –∫–∞–º–µ—Ä—ã: {e}")

def test_system_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –¥–æ—Å—Ç—É–ø"""
    print("\n" + "="*50)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–ù–û–ì–û –î–û–°–¢–£–ü–ê")
    print("="*50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        devices_to_check = [
            '/dev/fb0',      # Framebuffer
            '/dev/input',    # Input devices
            '/dev/video0',   # Camera
            '/dev/uinput',   # Virtual input
            '/dev/mem',      # Memory access
        ]
        
        for device in devices_to_check:
            if os.path.exists(device):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                    stat_info = os.stat(device)
                    readable = os.access(device, os.R_OK)
                    writable = os.access(device, os.W_OK)
                    
                    print(f"‚úÖ {device}: R={readable}, W={writable}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  {device}: {e}")
            else:
                print(f"‚ùå {device}: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {os.getenv('USER', 'unknown')}")
        print(f"UID: {os.getuid()}")
        print(f"GID: {os.getgid()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã
        try:
            import grp
            groups = [grp.getgrgid(gid).gr_name for gid in os.getgroups()]
            print(f"–ì—Ä—É–ø–ø—ã: {', '.join(groups)}")
        except:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö")
        
        print("‚úÖ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ò–ó–ö–û–£–†–û–í–ù–ï–í–´–• –î–†–ê–ô–í–ï–†–û–í DAUR-AI")
    print("–í–µ—Ä—Å–∏—è: 1.0")
    print("–î–∞—Ç–∞:", time.strftime("%Y-%m-%d %H:%M:%S"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if os.getuid() != 0:
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—É—Å–∫ –Ω–µ –æ—Ç root. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        print("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: sudo python3 test_drivers.py")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_system_access()
    test_screen_driver()
    test_input_driver()
    test_camera_driver()
    
    print("\n" + "="*50)
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    print("="*50)
    
    print("\nüìã –†–ï–ó–Æ–ú–ï:")
    print("- –î—Ä–∞–π–≤–µ—Ä—ã —Ä–µ–∞–ª–∏–∑—É—é—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é")
    print("- –û–±—Ö–æ–¥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞—â–∏—Ç —á–µ—Ä–µ–∑ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ API")
    print("- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ framebuffer, input events, V4L2")
    print("- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")

if __name__ == "__main__":
    main()
